-- Создаем таблицу клубов
CREATE TABLE клубы (
    ин serial PRIMARY KEY,
    название varchar(50) NOT NULL
);

-- Добавляем клубы
INSERT INTO клубы (название) VALUES 
('Блесна'),
('На крючке'),
('Пионер');

-- Создаем таблицу сотрудников
CREATE TABLE сотрудники (
    ин serial PRIMARY KEY,
    ФИО varchar(150),
    должность varchar(50),
    логин varchar(100),
    пароль varchar(100)
);

-- Добавляем администратора
INSERT INTO сотрудники (ФИО, логин, пароль) VALUES 
('Администратор', 'админ', 'админ');

-- Создаем таблицу клиентов
CREATE TABLE клиенты (
    ин serial PRIMARY KEY,
    фамилия varchar(50) NOT NULL,
    имя varchar(50) NOT NULL,
    отчество varchar(50),
    пол char(1) CHECK (пол IN ('м', 'ж')),
    дата_рождения date,
    клуб integer REFERENCES клубы(ин)
);

-- Добавляем клиентов
INSERT INTO клиенты (фамилия, имя, отчество, пол, дата_рождения, клуб) VALUES
('Михалов', 'Игнат', 'Васильевич', 'м', '1985-12-12', 1),
('Мороз', 'Петр', 'Петрович', 'м', '1966-05-01', 2),
('Солнцев', 'Иван', 'Сергеевич', 'м', '1977-04-29', 2),
('Васильев', 'Андрей', 'Михайлович', 'м', '1959-10-04', 2),
('Букин', 'Михаил', 'Сергеевич', 'м', '1989-02-18', 3);

-- Создаем таблицу тарифов
CREATE TABLE тарифы (
    ин serial PRIMARY KEY,
    название_рыбы varchar(50) NOT NULL,
    цена_сентябрь numeric(10,2) NOT NULL,
    цена_октябрь numeric(10,2) NOT NULL
);

-- Добавляем тарифы
INSERT INTO тарифы (название_рыбы, цена_сентябрь, цена_октябрь) VALUES
('форель', 200.00, 220.00),
('толстолобик', 130.00, 160.00),
('карп', 70.00, 85.00),
('карась', 90.00, 95.00);

-- Создаем таблицу посещений с явными значениями для тестирования скидок
CREATE TABLE посещения (
    ин serial PRIMARY KEY,
    клиент integer REFERENCES клиенты(ин) NOT NULL,
    номер_посещения integer NOT NULL,
    номер_домика integer NOT NULL,
    дата_заезда date NOT NULL,
    количество_дней integer NOT NULL,
    форель numeric(10,1) DEFAULT 0 NOT NULL,
    толстолобик numeric(10,1) DEFAULT 0 NOT NULL,
    карп numeric(10,1) DEFAULT 0 NOT NULL,
    карась numeric(10,1) DEFAULT 0 NOT NULL
);

-- Добавляем тестовые данные с разными суммами для проверки скидок
INSERT INTO посещения (клиент, номер_посещения, номер_домика, дата_заезда, количество_дней, форель, толстолобик, карп, карась) VALUES
-- Клиент 1 (сумма > 10000) - скидка 15%
(1, 1, 1, '2024-09-01', 3, 10.0, 10.0, 10.0, 10.0),
(1, 2, 1, '2024-10-01', 2, 12.0, 12.0, 12.0, 12.0),

-- Клиент 2 (сумма 7000-10000) - скидка 10%
(2, 1, 2, '2024-09-15', 2, 8.0, 8.0, 8.0, 8.0),
(2, 2, 2, '2024-10-15', 1, 7.0, 7.0, 7.0, 7.0),

-- Клиент 3 (сумма 5000-7000) - скидка 5%
(3, 1, 3, '2024-09-20', 2, 5.0, 5.0, 5.0, 5.0),
(3, 2, 3, '2024-10-20', 1, 4.0, 4.0, 4.0, 4.0),

-- Клиент 4 (сумма < 5000) - скидка 0%
(4, 1, 4, '2024-09-25', 1, 2.0, 2.0, 2.0, 2.0),
(4, 2, 4, '2024-10-25', 1, 1.0, 1.0, 1.0, 1.0),

-- Клиент 5 (минимальные значения)
(5, 1, 5, '2024-09-30', 1, 0.5, 0.5, 0.5, 0.5);

-- Создаем функцию для расчета стоимости рыбы с исправлениями
CREATE OR REPLACE FUNCTION get_fish_price(_count numeric, _name varchar(20), _d date)
RETURNS numeric AS $$
DECLARE
    result numeric;
    month_num int;
BEGIN
    month_num := EXTRACT(MONTH FROM _d);
    
    SELECT CASE 
        WHEN month_num = 9 THEN цена_сентябрь 
        WHEN month_num = 10 THEN цена_октябрь
        ELSE 160.00 -- цена по умолчанию для других месяцев
    END * _count
    INTO result
    FROM тарифы 
    WHERE название_рыбы = _name;
    
    RETURN COALESCE(result, 0);
END;
$$ LANGUAGE plpgsql;


-- Создаем представление для проверки сумм и скидок
CREATE OR REPLACE VIEW проверка_скидок AS
SELECT 
    к.ин AS клиент_id,
    к.фамилия || ' ' || к.имя AS клиент,
    SUM(
        get_fish_price(п.форель, 'форель', п.дата_заезда) +
        get_fish_price(п.толстолобик, 'толстолобик', п.дата_заезда) +
        get_fish_price(п.карп, 'карп', п.дата_заезда) +
        get_fish_price(п.карась, 'карась', п.дата_заезда)
    ) AS общая_сумма,
    CASE 
        WHEN SUM(
            get_fish_price(п.форель, 'форель', п.дата_заезда) +
            get_fish_price(п.толстолобик, 'толстолобик', п.дата_заезда) +
            get_fish_price(п.карп, 'карп', п.дата_заезда) +
            get_fish_price(п.карась, 'карась', п.дата_заезда)
        ) > 10000 THEN '15%'
        WHEN SUM(
            get_fish_price(п.форель, 'форель', п.дата_заезда) +
            get_fish_price(п.толстолобик, 'толстолобик', п.дата_заезда) +
            get_fish_price(п.карп, 'карп', п.дата_заезда) +
            get_fish_price(п.карась, 'карась', п.дата_заезда)
        ) > 7000 THEN '10%'
        WHEN SUM(
            get_fish_price(п.форель, 'форель', п.дата_заезда) +
            get_fish_price(п.толстолобик, 'толстолобик', п.дата_заезда) +
            get_fish_price(п.карп, 'карп', п.дата_заезда) +
            get_fish_price(п.карась, 'карась', п.дата_заезда)
        ) > 5000 THEN '5%'
        ELSE '0%'
    END AS скидка
FROM 
    посещения п
JOIN клиенты к ON к.ин = п.клиент
GROUP BY к.ин, к.фамилия, к.имя
ORDER BY общая_сумма DESC;
